import marimo

__generated_with = "0.11.20"
app = marimo.App(width="medium")


@app.cell
def _():
    from datetime import datetime, timedelta, timezone

    import marimo as mo
    import matplotlib.pyplot as plt
    import numpy as np
    import pandas as pd
    import plotly.express as px
    import plotly.graph_objects as go
    import polars as pl
    import scipy.stats as stats
    return datetime, go, mo, np, pd, pl, plt, px, stats, timedelta, timezone


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # Introduction

        The following libs are pre-installed:

        - numpy
        - scipy
        - pandas
        - polars
        - matplotlib
        - plotly

        Feel free to use others libs if needed.
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # Task 1: Data Extraction and Consolidation from SCADA Files

        In the wind enery world, [SCADA](https://en.wikipedia.org/wiki/SCADA) files are time series generated by a wind turbine. They are generally in [CSV](https://en.wikipedia.org/wiki/Comma-separated_values) format, but unfortunately no standard exists, neither for the file format nor the columns names.

        Exemple of SCADA file ([source](https://www.kaggle.com/datasets/berkerisen/wind-turbine-scada-dataset?resource=download&select=T1.csv)):

        ```csv
        Date/Time,LV ActivePower (kW),Wind Speed (m/s),Theoretical_Power_Curve (KWh),Wind Direction (°)
        01 01 2018 00:00,380.047790527343,5.31133604049682,416.328907824861,259.994903564453
        01 01 2018 00:10,453.76919555664,5.67216682434082,519.917511061494,268.64111328125
        01 01 2018 00:20,306.376586914062,5.21603679656982,390.900015810951,272.564788818359
        01 01 2018 00:30,419.645904541015,5.65967416763305,516.127568975674,271.258087158203
        01 01 2018 00:40,380.650695800781,5.57794094085693,491.702971953588,265.674285888671
        01 01 2018 00:50,402.391998291015,5.60405206680297,499.436385024805,264.57861328125
        01 01 2018 01:00,447.605712890625,5.79300785064697,557.372363290225,266.163604736328
        01 01 2018 01:10,387.2421875,5.30604982376098,414.898178826186,257.949493408203
        01 01 2018 01:20,463.651214599609,5.58462905883789,493.677652137077,253.480697631835
        ```

        For this task, you have to load the essential data from SCADA files into a DataFrame for a subsequent analysis of wind turbine performance.

        You will have to use the SCADA files from the `data/edp/` folder:

        - scada_T01_2016.csv
        - scada_T01_2017.csv
        - scada_T06_2016.csv
        - scada_T06_2017.csv
        - scada_T07_2016.csv
        - scada_T07_2017.csv
        - scada_T11_2016.csv
        - scada_T11_2017.csv

        Each file contains 1 year of data from an Enercon E33 wind turbine.

        The extracted data should include only turbine ID, timestamp, average wind speed, absolute average wind direction, and total active power for the 2 years and 4 turbines.

        Output exemple:
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.image("./images/task1_load_dataframe.png")
    return


@app.cell
def _():
    # Your response for task1
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # Task 2 - Power Curve Visualization for Wind Turbine Performance Analysis

        A power curve is a graphical representation of a wind turbine's power output as a function of wind speed. Visualizing the power curve allows for quick assessment of turbine performance and identification of potential anomalies.

        Your objective is to generate a scatter plot of active power versus wind speed for the  wind turbine T01 over the period \[2016-12-21; 2017-01-08\[.

        Output exemple:
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.image("./images/task2_scatter.png")
    return


@app.cell
def _():
    # Your response for task 2
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # Task 3 - Enhanced Power Curve Visualization

        Your objective is to enhance the existing power curve visualization by adding the average active power for wind speed bins of 1 m/s width.

        Also add the manufacturer reference power curve to the plot. You can find the reference power curve in the document `docs/Enercon_technical_data_brochure.pdf`.


        Output exemple:
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.image("./images/task3_plot_avg.png")
    return


@app.cell
def _():
    # Your response for task 3
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # Task 4 - Monthly Production Analysis by Turbine

        Tracking the monthly production of each turbine is essential for monitoring wind farm performance and identifying trends. This task requires you to aggregate turbine production data by month and visualize the monthly production of each turbine using a line plot.

        Output exemple:
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.image("images/task4_monthly_production.png")
    return


@app.cell
def _():
    # Your response for task 4
    return


@app.cell(hide_code=True)
def _(mo):
    mo.md(
        r"""
        # Task 5 - Seasonal Wind Direction Analysis for Wind Turbine T06

        Your objective is to create four polar bar plots, one for each season (Winter, Spring, Summer, and Fall), showing the frequency distribution of wind direction for wind turbine T06. Use 30° bins for the wind direction.

        Output exemple:
        """
    )
    return


@app.cell(hide_code=True)
def _(mo):
    mo.image("images/task5_seasonal.png")
    return


@app.cell
def _():
    # Your response for task 5
    return


if __name__ == "__main__":
    app.run()
